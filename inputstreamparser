#!/usr/bin/env python3
import sys

def print_hex_block(block):
    return " ".join(f"{byte:02x}" for byte in block)

def parse_stream_helper(blocks, current_parsed_stream, results, transaction_dict):
    # Base case
    if not blocks:
        # Check if all transaction types are represented
        transaction_types = {message["type"] for message in current_parsed_stream}
        if {"BALANCE", "INVOICE", "TRANSFER"}.issubset(transaction_types):
            results.append(current_parsed_stream)
        return

    # Iterate over possible transaction types and lengths
    for length, message_type in [(2, "BALANCE"), (4, "INVOICE"), (5, "TRANSFER")]:
        if len(blocks) >= length:
            first_block = blocks[0]
            second_line = blocks[1] if length > 1 else None

            # Create a new dictionary for this new combination
            new_transaction_dict = transaction_dict.copy()

            # Check for consistency in transaction type values
            if message_type in new_transaction_dict:
                if second_line != new_transaction_dict[message_type]:
                    continue  # Skip this combination if there's a mismatch
            elif second_line is not None:
                # Add the transaction type and its value to the dictionary
                new_transaction_dict[message_type] = second_line

            message = {
                "type": message_type,
                "blocks": blocks[:length]
            }

            # Recursive call
            parse_stream_helper(
                blocks[length:],
                current_parsed_stream + [message],
                results,
                new_transaction_dict
            )


def parse_stream(blocks):
    results = []
    transaction_dict = {} 
    parse_stream_helper(blocks, [], results, transaction_dict)
    return results


def inputstreamparser(input_file_path):
    block_size = 16
    
    with open(input_file_path, 'rb') as file:
        file_content_binary = file.read()
    
    blocks = [file_content_binary[i:i + block_size] for i in range(0, len(file_content_binary), block_size)]
    
    possible_sequence_combos = parse_stream(blocks)

    for count, sequence in enumerate(possible_sequence_combos):
        for message in sequence:
            print(message["type"])
            for block in message["blocks"]:
                print(print_hex_block(block))

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("missing arg")
        sys.exit(1)
    
    input_file = sys.argv[1]
    inputstreamparser(input_file)
